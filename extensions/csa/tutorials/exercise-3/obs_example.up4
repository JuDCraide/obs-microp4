#include"msa.up4"
#include"../exe_common.up4"

cpackage IPv4(pkt p, im_t im, in empty_t ia, out bit<16> nh, inout empty_t ioa);
cpackage IPv6(pkt p, im_t im, in empty_t ia, out bit<16> nh, inout empty_t ioa);

header ethernet_h {
  bit<48> dstAddr;
  bit<48> srcAddr;
  bit<16> ethType; 
}

struct hdr_t {
  ethernet_h eth;
}

cpackage OneBigSwitchExample : implements Unicast<hdr_t, empty_t, 
                                            empty_t, empty_t, empty_t> {
  parser micro_parser(extractor ex, pkt p, im_t im, out hdr_t hdr, inout empty_t m,
                        in empty_t ia, inout empty_t ioa) {
    state start {
      ex.extract(p, hdr.eth);
      transition accept;
    }
  }

  control micro_control(pkt p, im_t im, inout hdr_t hdr, inout empty_t m,
                          in empty_t ia, out empty_t oa, inout empty_t ioa) {
    bit<16> nh;

    IPv4() ipv4_i;
    IPv6() ipv6_i;

    action forward(bit<48> dstAddr, bit<48> srcAddr, PortId_t port) {
      hdr.eth.dstAddr = dstAddr;
      hdr.eth.srcAddr = srcAddr;
      im.set_out_port(port);
    }

    // h1 h1-eth0:s1-eth1 h1-eth1:s2-eth1 (1.1)
    // h2 h2-eth0:s1-eth2 (2.1)
    // h3 h3-eth0:s2-eth2 (3.1)
    // s1 lo:  s1-eth1:h1-eth0 s1-eth2:h2-eth0
    // s2 lo:  s2-eth1:h1-eth1 s2-eth2:h3-eth0
    
    table forward_tbl2 {
        key = { 
          nh : exact;
          hdr.eth.dstAddr : exact;
        } 
        actions = { forward; }
        const entries = {
            (16w1, 0x000000000001) : forward(0x000000000001, 48w0x00aabb000001, 9w1);
            (16w2, 0x000000000002) : forward(0x000000000002, 48w0x00aabb000002, 9w2);
            (16w2, 0x000000000003) : forward(0x000000000003, 48w0x00aabb000003, 9w2);
        }
    }
    table forward_tbl {
        key = { 
          nh : exact;
        } 
        actions = { forward; }
        const entries = {
            (16w1) : forward(0x000000000001, 48w0x00aabb000001, 9w1);
            (16w2) : forward(0x000000000002, 48w0x00aabb000002, 9w2);
        }
    }
  
    apply { 
        nh = 16w0;
 
        if (hdr.eth.ethType == 0x0800)
            ipv4_i.apply(p, im, ia, nh, ioa);
        else if (hdr.eth.ethType == 0x86DD)
            ipv6_i.apply(p, im, ia, nh, ioa);

        forward_tbl.apply(); 
    }
  }

  control micro_deparser(emitter em, pkt p, in hdr_t hdr) {
    apply { 
        em.emit(p, hdr.eth); 
    }
  }
}

OneBigSwitchExample() main;