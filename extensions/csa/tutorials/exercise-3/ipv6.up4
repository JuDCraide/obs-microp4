/*
 * Author: Hardik Soni
 * Email: hks57@cornell.edu
 */

#include"msa.up4"
#include"../exe_common.up4"

header ipv6_h {
  bit<4> version;
  bit<8> class;
  bit<20> label;
  bit<16> totalLen;
  bit<8> nexthdr;
  bit<8> hoplimit;
  bit<128> srcAddr;
  bit<128> dstAddr;  
}

struct l3v6_hdr_t {
  ipv6_h ipv6;
}

cpackage IPv6 : implements Unicast<l3v6_hdr_t, empty_t, empty_t, bit<16>, empty_t> {


  parser micro_parser(extractor ex, pkt p, im_t im, out l3v6_hdr_t hdr, inout empty_t meta,  
                        in empty_t ia, inout empty_t ioa) { //inout arg
    // TODO:exercise-2:
    // implement parser for IPv6 header
  }

  control micro_control(pkt p, im_t im, inout l3v6_hdr_t hdr, inout empty_t m,
                          in empty_t e, out bit<16> nexthop, // nexthop out arg
                          inout empty_t ioa) {     
    // TODO:exercise-2:
    // write MAT to determine nexthop
    apply {
    }
  }

  control micro_deparser(emitter em, pkt p, in l3v6_hdr_t h) {
    // TODO:exercise-2:
    // assemble IPv6 header
    apply {
    }
  }
}
