#include"msa.up4"
#include"../exe_common.up4"

header ethernet_h {
  bit<48> dstAddr;
  bit<48> srcAddr;
  bit<16> ethType; 
}

struct hdr_t {
  ethernet_h eth;
}

cpackage OBSEth : implements Unicast<hdr_t, empty_t, 
                                            empty_t, empty_t, empty_t> {
  parser micro_parser(extractor ex, pkt p, im_t im, out hdr_t hdr, inout empty_t m,
                        in empty_t ia, inout empty_t ioa) {
    state start {
      ex.extract(p, hdr.eth);
      transition accept;
    }
  }

  control micro_control(pkt p, im_t im, inout hdr_t hdr, inout empty_t m,
                          in empty_t ia, out empty_t oa, inout empty_t ioa) {
    bit<16> nh;

    action forward(bit<48> dstAddr, bit<48> srcAddr, PortId_t port) {
      hdr.eth.dstAddr = dstAddr;
      hdr.eth.srcAddr = srcAddr;
      im.set_out_port(port);
    }

    table forward_tbl {
        key = { nh : exact; } 
        actions = { forward; }
        const entries = {
            (16w1) : forward(0x000000000001, 48w0x00aabb000001, 9w1);
            (16w2) : forward(0x000000000002, 48w0x00aabb000002, 9w2);
        }
    }
  
    apply { 
        nh = 16w0;

        forward_tbl.apply(); 
    }
  }

  control micro_deparser(emitter em, pkt p, in hdr_t hdr) {
    apply { 
        em.emit(p, hdr.eth); 
    }
  }
}

OBSEth() main;