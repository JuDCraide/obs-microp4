#include"msa.up4"
#include"../../exe_common.up4"

//quebrar classe ehternet em instantiate and invoque

header ethernet_h {
  bit<48> dstAddr;
  bit<48> srcAddr;
  bit<16> ethType; 
}

struct hdr_t {
  ethernet_h eth;
}

cpackage Ethernet : implements Unicast<ehternet_hdr_t, empty_t, empty_t, bit<16>, empty_t> {

  parser micro_parser(extractor ex, pkt p, im_t im, out ehternet_hdr_t hdr, 
                      inout empty_t meta, in empty_t ia, inout empty_t ioa) {
   state start {
      ex.extract(p, hdr.eth);
      transition accept;
    }
  }

  control micro_control(pkt p, im_t im, inout ehternet_hdr_t hdr, inout empty_t m,
                          in empty_t e, out bit<16> nexthop, 
                          inout empty_t ioa) { // nexthop out arg
    bit<16> nh;

    const bit<48> mac_s1 = 0x00aabb000001;
    const bit<48> mac_s2 = 0x00aabb000002;
    const bit<48> mac_s3 = 0x00aabb000003;

    const bit<48> mac_h1 = 0x000000000001;
    const bit<48> mac_h2 = 0x000000000002;
    const bit<48> mac_h3 = 0x000000000003;
    const bit<48> mac_h4 = 0x000000000004;

    const bit<16> next_hop_eth1 = 1;
    const bit<16> next_hop_eth2 = 2;
    const bit<16> next_hop_eth3 = 3;
    const bit<16> next_hop_eth4 = 4;

    const bit<9> eth1 = 1;
    const bit<9> eth2 = 2;
    const bit<9> eth3 = 3;
    const bit<9> eth4 = 4;

    action forward(bit<48> dstAddr, bit<48> srcAddr, PortId_t port) {
      hdr.eth.dstAddr = dstAddr;
      hdr.eth.srcAddr = srcAddr;
      im.set_out_port(port);
    }

    table forward_tbl {
        key = { 
          nh : exact;
          
        } 
        actions = { forward; }
        const entries = {
            (next_hop_eth1) : forward(mac_h1, mac_s1, eth1);
            (next_hop_eth2) : forward(mac_h2, mac_s1, eth2);
            (next_hop_eth3) : forward(mac_h3, mac_s1, eth3);
            (next_hop_eth4) : forward(mac_h4, mac_s1, eth4);
        }
        
    }
  
    apply { 
        nh = 16w0;

        forward_tbl.apply(); 
    }
  }

  control micro_deparser(emitter em, pkt p, in ehternet_hdr_t h) {
    apply { 
      em.emit(p, h.eth); 
    }
  }
}
